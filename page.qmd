---
title: "Projet Meteo"
subtitle: "prevision meteo"
---

```{python}
"""
API
"""
from IPython.display import display, HTML
import json
from datetime import datetime, timedelta
import pandas as pd
import requests
from collections import Counter

# Obtenir la date actuelle
date_actuelle = datetime.now()

# Formater les dates au format requis pour l'URL
format_date = "%Y-%m-%d"
date_i = datetime.now().strftime(format_date)

# Prendre le nombre de jours nécessaires
jours = 4
date = []
for i in range(jours+1):
    date_j = (date_actuelle + timedelta(days=i)).strftime(format_date)
    date.append(date_j)

# Construire l'URL de l'API selon la date (intervalle de 5 jours) à Montpellier

url = f"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&hourly=weather_code,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,wind_direction_10m_dominant&timezone=Europe%2FBerlin&start_date={date_i}&end_date={date_j}"

# Envoi de la requête GET aux APIs
response = requests.get(url)

# Vérification du statut de la requête "daily"
if response.status_code == 200:
    # Conversion des données JSON en un dictionnaire Python
    data = response.json()

    # Accéder aux données météo à partir de la réponse JSON
    wmo = data["daily"]["weather_code"]
    temperature_max = data["daily"]["temperature_2m_max"]
    temperature_min = data["daily"]["temperature_2m_min"]
    direction_vent = data["daily"]["wind_direction_10m_dominant"]
    precipitations = data["daily"]["precipitation_sum"]
    vent_h = data["hourly"]["wind_speed_10m"]
    wmo_h = data["hourly"]["weather_code"]

    # Prendre les valeurs entières si possible
    temperature_max_ent = [round(i) if not pd.isna(
        i) else None for i in temperature_max]
    temperature_min_ent = [round(i) if not pd.isna(
        i) else None for i in temperature_min]

    # Remplacer les valeurs manquantes par "-" pour la quantité de précipitations
    precipitations = [i if not pd.isna(i) else "-" for i in precipitations]

    # Remplacer les valeurs manquantes par la valeur 100 (qui affichera une image d'erreur) pour les code WMO
    wmo = [i if not pd.isna(i) else 100 for i in wmo]
    wmo_h = [i if not pd.isna(i) else 100 for i in wmo_h]

    # Prendre la moyenne des températures
    moyenne = []
    for i in range(jours+1):
        if temperature_max_ent[i] != None and temperature_min_ent[i] != None:
            moyenne.append((temperature_max_ent[i]+temperature_min_ent[i])/2)
        else:
            moyenne.append(None)
else:
    # Affichage d'un message d'erreur si la requête échoue
    print("Erreur lors de la récupération des données météorologiques.")


"""
DATES
"""

# Dictionnaire de correspondance des abréviations des jours de la semaine en français
jours_semaine_fr = {
    'Mon': 'Lun',
    'Tue': 'Mar',
    'Wed': 'Mer',
    'Thu': 'Jeu',
    'Fri': 'Ven',
    'Sat': 'Sam',
    'Sun': 'Dim'
}

# Fonction pour formater les dates


def formater_date(date):
    # Convertir la chaîne de date en objet datetime
    date_obj = datetime.strptime(date, '%Y-%m-%d')
    # Obtenir l'abréviation du jour en anglais
    nom_jour_abrege_en = date_obj.strftime('%a')
    # Mapper l'abréviation du jour en français à partir du dictionnaire
    nom_jour_abrege_fr = jours_semaine_fr.get(nom_jour_abrege_en)
    # Formater la date en "jour/mois"
    jour_mois = date_obj.strftime('%d/%m')
    return nom_jour_abrege_fr, jour_mois


# Utiliser la fonction pour formater les dates dans la liste
noms_jours, dates_formatees = zip(*[formater_date(i) for i in date])


"""
ICÔNES WMO
"""

# Charger le fichier JSON dans un dictionnaire
with open('images.json', 'r') as json_file:
    data = json.load(json_file)

# Créer un dictionnaire de correspondance entre les codes WMO et les noms et URLs du fichier JSON
correspondance_wmo = {str(key): value for key, value in data.items()}

# Récupérer les URLs et les noms à partir des codes WMO
noms_urls = []
for i in wmo:
    info = correspondance_wmo[str(i)]
    noms_urls.append(
        {'nom': info['nom'], 'url': info['url']})


# Trouver les codes WMO de nuit
wmo_n = [0] * jours
for i in range(jours):  # Chaque nuit
    # Utilisation de Counter pour compter les occurrences des codes WMO entre 18h et 6h du matin
    compteur = Counter(wmo_h[24*i + 18: 24*i + 30])
    # Trouver l'élément ayant le plus grand nombre d'occurrences
    wmo_n[i] = max(compteur, key=compteur.get)

# Récupérer les URLs à partir des codes WMO de nuit
noms_urls_n = []
for i in wmo_n:
    info_n = correspondance_wmo[str(i)]
    noms_urls_n.append(
        {'nom': info_n['nom'], 'urln': info_n['urln']})


"""
TEMPERATURES
"""

# Echelle discrète de couleurs basée sur les températures


def temperature_to_color(temperature):
    if temperature != None:
        if (temperature < 0):
            return 'rgb(100, 180, 210)'
        elif (0 <= temperature < 5):
            return 'rgb(90, 220, 200)'
        elif (5 <= temperature < 10):
            return 'rgb(70, 220, 120)'
        elif (10 <= temperature < 15):
            return 'rgb(80, 230, 40)'
        elif (15 <= temperature < 20):
            return 'rgb(155, 230, 20)'
        elif (20 <= temperature < 25):
            return 'rgb(220, 190, 10)'
        elif (25 <= temperature < 30):
            return 'rgb(210, 110, 10)'
        elif (30 <= temperature < 35):
            return 'rgb(200, 60, 0)'
        else:
            return 'rgb(200, 30, 0)'
    else:
        return ''

# Afficher les températures et la couleur associée si possible


def generate_temperature(temperature_min, temperature_max, moyenne):
    if temperature_min == None and temperature_max == None:
        return '/ °C - / °C'
    elif temperature_min != None and temperature_max == None:
        return f'''
                {temperature_min} °C - / °C
        '''
    elif temperature_min == None and temperature_max != None:
        return f'''
                / °C - {temperature_max} °C
        '''
    else:
        return f'''
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne)};">
                {temperature_min} °C - {temperature_max} °C
            </div>
        '''


"""
VENT
"""

# Calculer la vitesse moyenne du vent chaque jour
vent = [0] * (jours+1)

for i in range(jours+1):  # Chaque jour
    a = 0  # Nombre de données disponibles sur les 24 totales
    for j in range(24):  # Chaque heure d'une journée
        # Si la donnée est disponible, elle est ajoutée et a est incrémenté
        if vent_h[24*i + j] != None:
            vent[i] = vent[i] + vent_h[24*i + j]
            a = a + 1
    if a != 0:  # Si on a au moins une donnée
        # Moyenne du vent en valeur entière du jour i selon les valeurs disponibles
        vent[i] = round(vent[i]/a)
    else:
        vent[i] = None


# Echelle discrète de couleurs basée sur la vitesse du vent


def vent_to_color(vent):
    if vent != None:
        if (vent < 30):
            return 'rgba(0, 0, 0, 0)'
        elif (30 <= vent < 50):
            return 'rgb(255, 255, 0)'
        elif (50 <= vent < 100):
            return 'rgb(255, 128, 0)'
        elif (100 <= vent < 150):
            return 'rgb(255, 0, 0)'
        else:
            return 'rgb(130, 0, 255)'
    else:
        return ''


# Afficher la direction cardinale du vent si possible


def generate_wind_icon(direction):
    if direction == None:
        return ''
    else:
        return f'''
            <div style="width: 20px; height: 20px; transform: rotate({direction-180}deg) translate(40%, 10%); display: inline-block">
                <div style="width: 0; border-left: 5px solid transparent; 
                            border-right: 5px solid transparent; border-bottom: 15px solid black;">
                </div>
            </div>
        '''


# Afficher la vitesse du vent ainsi que la direction et la couleur associées si possible


def generate_wind(vent, direction):
    if vent == None:
        return '-'
    else:
        return f'''
            <div class="mini-case" style="background-color: {vent_to_color(vent)};">
                {generate_wind_icon(direction)} {vent} km/h
            </div>
        '''


"""
TABLEAU METEO
"""

html_code = f"""
<head>
    <link rel="stylesheet" href="styles.css">
</head>

<table id="myTable">
    <!-- Ligne 1 -->
    <tr title="Date" style="background-color: rgb(180, 255, 255)">
        <th style="background-color: rgb(255, 255, 255); border-top:3px solid rgb(20, 15, 185); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <strong> {noms_jours[0]} </strong>
            <br>Aujourd'hui
        </th>
        <th>
            <strong> {noms_jours[1]} </strong>
            <br>Demain
        </th>
        <th>
            <strong> {noms_jours[2]} </strong>
            <br>{dates_formatees[2]}
        </th>
        <th>
            <strong> {noms_jours[3]} </strong>
            <br>{dates_formatees[3]}
        </th>
        <th>
            <strong> {noms_jours[4]} </strong>
            <br>{dates_formatees[4]}
        </th>
    </tr>

    <!-- Ligne 2 -->
    <tr title="icône WMO" style="background-color: rgb(82, 177, 255)">
        <th style="border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <img class="day-image" src ="{noms_urls[0]['url']}" title="{noms_urls[0]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[0]['urln']}" title="{noms_urls_n[0]['nom']}">
        </th>
        <th>
            <img class="day-image" src ="{noms_urls[1]['url']}" title="{noms_urls[1]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[1]['urln']}" title="{noms_urls_n[1]['nom']}">
        </th>
        <th>
            <img class="day-image" src ="{noms_urls[2]['url']}" title="{noms_urls[2]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[2]['urln']}" title="{noms_urls_n[2]['nom']}">
        </th>
        <th>
            <img class="day-image" src ="{noms_urls[3]['url']}" title="{noms_urls[3]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[3]['urln']}" title="{noms_urls_n[3]['nom']}">
        </th>
        <th>
            <img src ="{noms_urls[4]['url']}" title="{noms_urls[4]['nom']}" style="width:60px; height:60px">
        </th>
    </tr>

    <!-- Ligne 3 -->
    <tr title="Températures minimale - maximale" style="background-color: rgb(180, 255, 255)">
        <th style="background-color: rgb(255, 255, 255); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            {generate_temperature(temperature_min_ent[0], temperature_max_ent[0], moyenne[0])}
        </th>
        <th>
            {generate_temperature(temperature_min_ent[1], temperature_max_ent[1], moyenne[1])}
        </th>
        <th>
            {generate_temperature(temperature_min_ent[2], temperature_max_ent[2], moyenne[2])}
        </th>
        <th>
            {generate_temperature(temperature_min_ent[3], temperature_max_ent[3], moyenne[3])}
        </th>
        <th>
            {generate_temperature(temperature_min_ent[4], temperature_max_ent[4], moyenne[4])}
        </th>
    </tr>

    <!-- Ligne 4 -->
    <tr title="Vitesse moyenne du vent" style="background-color: rgb(180, 255, 255)">
        <th style="background-color: rgb(255, 255, 255); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            {generate_wind(vent[0], direction_vent[0])}
        </th>
        <th>
            {generate_wind(vent[1], direction_vent[1])}
        </th>
        <th>
            {generate_wind(vent[2], direction_vent[2])}
        </th>
        <th>
            {generate_wind(vent[3], direction_vent[3])}
        </th>
        <th>
            {generate_wind(vent[4], direction_vent[4])}
        </th>
    </tr>
    
    <!-- Ligne 5 -->
    <tr title="Quantité de précipitations" style="background-color: rgb(180, 255, 255)">
        <th style="background-color: rgb(255, 255, 255); border-bottom:3px solid rgb(20, 15, 185); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <img src="images_svg/Water_Drop.svg"> {precipitations[0]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[1]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[2]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[3]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[4]} mm
        </th>
    </tr>
</table>
"""

display(HTML(html_code))
```

Météo de Montpellier pour les 5 prochains jours, aujourd'hui compris, affichant respectivement pour chaque journée (colonne):
<ol>
    <li>la date,</li>
    <li>le pictogramme WMO (World Meteorological Organization),</li>
    <li>les températures minimale et maximale en valeur entière en degrés Celsius dont la couleur du fond change en fonction des valeurs,</li>
    <li>la vitesse moyenne du vent en valeur entière en kilomètres par heure et sa direction cardinale représentée par une flèche, dont la couleur du fond change en fonction de la valeur,</li>
    <li>et enfin la quantité de précipitations en millimètres.</li>
</ol>
De plus, un pictogramme WMO de nuit apparaît entre chaque jour et est déterminé selon le code WMO ayant le plus grand nombre d'occurences entre 18h et 6h. 

Site à usage non commercial, tous les pictogrammes proviennent du site [meteoblue.com](https://content.meteoblue.com/fr/recherche-education/specifications/standards/symboles-et-pictogrammes) et sont en format svg.

Certaines descriptions sont affichées en survolant les cellules ainsi que les images avec un curseur de souris. Il peut arriver que les symboles "-" ou "/" s'affichent à la place de certaines données indisponibles. C'est le cas notamment du cinquième jour dont la direction du vent et la quantité de précipitations ne sont pas encore disponibles.

Toutes les informations proviennent d'une API (Application Programming Interface) choisie et proposée par [open-meteo.com](https://open-meteo.com/en/docs/meteofrance-api) et sont mises à jour toutes les trois heures.
